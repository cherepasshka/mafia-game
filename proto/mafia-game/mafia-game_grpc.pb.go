// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/mafia-game.proto

package mafia_game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaServiceClient is the client API for MafiaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaServiceClient interface {
	ConnectToSession(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*ConnectToSessionResponse, error)
	LeaveSession(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*LeaveSessionResponse, error)
	ListConnections(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (MafiaService_ListConnectionsClient, error)
	VoteForMafia(ctx context.Context, in *VoteForMafiaRequest, opts ...grpc.CallOption) (*VoteForMafiaResponse, error)
	MakeMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	StartDay(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*DayResponse, error)
	GetStatus(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ExitGameSession(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*ExitGameSessionResponse, error)
}

type mafiaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaServiceClient(cc grpc.ClientConnInterface) MafiaServiceClient {
	return &mafiaServiceClient{cc}
}

func (c *mafiaServiceClient) ConnectToSession(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*ConnectToSessionResponse, error) {
	out := new(ConnectToSessionResponse)
	err := c.cc.Invoke(ctx, "/MafiaService/ConnectToSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) LeaveSession(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*LeaveSessionResponse, error) {
	out := new(LeaveSessionResponse)
	err := c.cc.Invoke(ctx, "/MafiaService/LeaveSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) ListConnections(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (MafiaService_ListConnectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MafiaService_ServiceDesc.Streams[0], "/MafiaService/ListConnections", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaServiceListConnectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MafiaService_ListConnectionsClient interface {
	Recv() (*ListConnectionsResponse, error)
	grpc.ClientStream
}

type mafiaServiceListConnectionsClient struct {
	grpc.ClientStream
}

func (x *mafiaServiceListConnectionsClient) Recv() (*ListConnectionsResponse, error) {
	m := new(ListConnectionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaServiceClient) VoteForMafia(ctx context.Context, in *VoteForMafiaRequest, opts ...grpc.CallOption) (*VoteForMafiaResponse, error) {
	out := new(VoteForMafiaResponse)
	err := c.cc.Invoke(ctx, "/MafiaService/VoteForMafia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) MakeMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/MafiaService/MakeMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) StartDay(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*DayResponse, error) {
	out := new(DayResponse)
	err := c.cc.Invoke(ctx, "/MafiaService/StartDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) GetStatus(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/MafiaService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) ExitGameSession(ctx context.Context, in *DefaultRequest, opts ...grpc.CallOption) (*ExitGameSessionResponse, error) {
	out := new(ExitGameSessionResponse)
	err := c.cc.Invoke(ctx, "/MafiaService/ExitGameSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaServiceServer is the server API for MafiaService service.
// All implementations must embed UnimplementedMafiaServiceServer
// for forward compatibility
type MafiaServiceServer interface {
	ConnectToSession(context.Context, *DefaultRequest) (*ConnectToSessionResponse, error)
	LeaveSession(context.Context, *DefaultRequest) (*LeaveSessionResponse, error)
	ListConnections(*DefaultRequest, MafiaService_ListConnectionsServer) error
	VoteForMafia(context.Context, *VoteForMafiaRequest) (*VoteForMafiaResponse, error)
	MakeMove(context.Context, *MoveRequest) (*MoveResponse, error)
	StartDay(context.Context, *DefaultRequest) (*DayResponse, error)
	GetStatus(context.Context, *DefaultRequest) (*StatusResponse, error)
	ExitGameSession(context.Context, *DefaultRequest) (*ExitGameSessionResponse, error)
	mustEmbedUnimplementedMafiaServiceServer()
}

// UnimplementedMafiaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServiceServer struct {
}

func (UnimplementedMafiaServiceServer) ConnectToSession(context.Context, *DefaultRequest) (*ConnectToSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToSession not implemented")
}
func (UnimplementedMafiaServiceServer) LeaveSession(context.Context, *DefaultRequest) (*LeaveSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveSession not implemented")
}
func (UnimplementedMafiaServiceServer) ListConnections(*DefaultRequest, MafiaService_ListConnectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedMafiaServiceServer) VoteForMafia(context.Context, *VoteForMafiaRequest) (*VoteForMafiaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteForMafia not implemented")
}
func (UnimplementedMafiaServiceServer) MakeMove(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedMafiaServiceServer) StartDay(context.Context, *DefaultRequest) (*DayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDay not implemented")
}
func (UnimplementedMafiaServiceServer) GetStatus(context.Context, *DefaultRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedMafiaServiceServer) ExitGameSession(context.Context, *DefaultRequest) (*ExitGameSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitGameSession not implemented")
}
func (UnimplementedMafiaServiceServer) mustEmbedUnimplementedMafiaServiceServer() {}

// UnsafeMafiaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServiceServer will
// result in compilation errors.
type UnsafeMafiaServiceServer interface {
	mustEmbedUnimplementedMafiaServiceServer()
}

func RegisterMafiaServiceServer(s grpc.ServiceRegistrar, srv MafiaServiceServer) {
	s.RegisterService(&MafiaService_ServiceDesc, srv)
}

func _MafiaService_ConnectToSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).ConnectToSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MafiaService/ConnectToSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).ConnectToSession(ctx, req.(*DefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_LeaveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).LeaveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MafiaService/LeaveSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).LeaveSession(ctx, req.(*DefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_ListConnections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DefaultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServiceServer).ListConnections(m, &mafiaServiceListConnectionsServer{stream})
}

type MafiaService_ListConnectionsServer interface {
	Send(*ListConnectionsResponse) error
	grpc.ServerStream
}

type mafiaServiceListConnectionsServer struct {
	grpc.ServerStream
}

func (x *mafiaServiceListConnectionsServer) Send(m *ListConnectionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MafiaService_VoteForMafia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteForMafiaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).VoteForMafia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MafiaService/VoteForMafia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).VoteForMafia(ctx, req.(*VoteForMafiaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MafiaService/MakeMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).MakeMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_StartDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).StartDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MafiaService/StartDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).StartDay(ctx, req.(*DefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MafiaService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).GetStatus(ctx, req.(*DefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_ExitGameSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).ExitGameSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MafiaService/ExitGameSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).ExitGameSession(ctx, req.(*DefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MafiaService_ServiceDesc is the grpc.ServiceDesc for MafiaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MafiaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MafiaService",
	HandlerType: (*MafiaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectToSession",
			Handler:    _MafiaService_ConnectToSession_Handler,
		},
		{
			MethodName: "LeaveSession",
			Handler:    _MafiaService_LeaveSession_Handler,
		},
		{
			MethodName: "VoteForMafia",
			Handler:    _MafiaService_VoteForMafia_Handler,
		},
		{
			MethodName: "MakeMove",
			Handler:    _MafiaService_MakeMove_Handler,
		},
		{
			MethodName: "StartDay",
			Handler:    _MafiaService_StartDay_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _MafiaService_GetStatus_Handler,
		},
		{
			MethodName: "ExitGameSession",
			Handler:    _MafiaService_ExitGameSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConnections",
			Handler:       _MafiaService_ListConnections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mafia-game.proto",
}
