package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"fmt"
	"strconv"

	"soa.mafia-game/scoreboard-service/graph/model"
)

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	var comment = model.Comment{
		ScoreboardID: input.ScoreboardID,
		Text:         input.Text,
		User:         input.User,
	}

	// if n == 0 {
	// 	r.Resolver.Comments = make(map[string]model.Comment)
	// }
	n := len(r.Resolver.Comments)
	id := input.ID
	if id != nil {
		_, ok := r.Resolver.Comments[*id]
		if !ok {
			return nil, fmt.Errorf("not found")
		}
		r.Resolver.Comments[*id] = comment
	} else {
		nid := strconv.Itoa(n + 1)
		comment.ID = nid
		r.Resolver.Comments[nid] = comment
	}
	r.AddCommentRelation(comment)
	return &comment, nil
}

// CreateScoreboard is the resolver for the createScoreboard field.
func (r *mutationResolver) CreateScoreboard(ctx context.Context, input model.NewScoreboard) (*model.Scoreboard, error) {
	scoreboard := model.Scoreboard{
		StartedAt: input.StartedAt,
		Players:   input.Players,
		Related:   make([]*model.Comment, 0),
		Winner:    input.Winner,
	}
	n := len(r.Resolver.ScoreboardsStore)
	id := input.ID
	if id != nil {
		_, ok := r.Resolver.ScoreboardsStore[*id]
		if !ok {
			return nil, fmt.Errorf("not found")
		}
		r.Resolver.ScoreboardsStore[*id] = scoreboard
	} else {
		nid := strconv.Itoa(n + 1)
		scoreboard.ID = nid
		r.Resolver.ScoreboardsStore[nid] = scoreboard
	}
	return &scoreboard, nil
}

// Scoreboards is the resolver for the Scoreboards field.
func (r *queryResolver) Scoreboards(ctx context.Context, limit *int) ([]*model.Scoreboard, error) {
	result := make([]*model.Scoreboard, 0)
	for scoreboardId := range r.ScoreboardsStore {
		scoreboard := r.ScoreboardsStore[scoreboardId]
		result = append(result, &scoreboard)
		if len(result) >= *limit {
			break
		}
	}
	return result, nil
}

// Scoreboard is the resolver for the Scoreboard field.
func (r *queryResolver) Scoreboard(ctx context.Context, id string) (*model.Scoreboard, error) {
	scoreboard, ok := r.Resolver.ScoreboardsStore[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	}
	return &scoreboard, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
